[package]
name = "wasmer-workspace"
version = "2.2.1"
description = "Wasmer workspace"
authors = ["Wasmer Engineering Team <engineering@wasmer.io>"]
repository = "https://github.com/ElrondNetwork/wasmer"
license = "MIT"
edition = "2018"
publish = false
autoexamples = false

[dependencies]
wasmer = { version = "=2.2.1", path = "lib/api", default-features = false }
wasmer-compiler = { version = "=2.2.1", path = "lib/compiler" }
wasmer-compiler-cranelift = { version = "=2.2.1", path = "lib/compiler-cranelift", optional = true }
wasmer-compiler-singlepass = { version = "=2.2.1", path = "lib/compiler-singlepass", optional = true }
wasmer-compiler-llvm = { version = "=2.2.1", path = "lib/compiler-llvm", optional = true }
wasmer-emscripten = { version = "=2.2.1", path = "lib/emscripten", optional = true }
wasmer-engine = { version = "=2.2.1", path = "lib/engine" }
wasmer-engine-universal = { version = "=2.2.1", path = "lib/engine-universal", optional = true }
wasmer-engine-dylib = { version = "=2.2.1", path = "lib/engine-dylib", optional = true }
wasmer-engine-staticlib = { version = "=2.2.1", path = "lib/engine-staticlib", optional = true }
wasmer-wasi = { version = "=2.2.1", path = "lib/wasi", optional = true }
wasmer-wast = { version = "=2.2.1", path = "tests/lib/wast", optional = true }
wasi-test-generator = { version = "=2.2.1", path = "tests/wasi-wast", optional = true }
wasmer-cache = { version = "=2.2.1", path = "lib/cache", optional = true }
wasmer-types = { version = "=2.2.1", path = "lib/types" }
wasmer-middlewares = { version = "=2.2.1", path = "lib/middlewares", optional = true }
cfg-if = "1.0"

[workspace]
members = [
    # "lib/clif-backend",
    "lib/singlepass-backend",
    "lib/runtime",
    "lib/runtime-core",
    "lib/runtime-core-tests",
    "lib/emscripten",
    "lib/engine",
    "lib/engine-universal",
    "lib/engine-dylib",
    "lib/engine-staticlib",
    "lib/object",
    "lib/vfs",
    "lib/vm",
    "lib/wasi",
    "lib/wasi-types",
    "lib/wasi-experimental-io-devices",
    "lib/types",
    "tests/wasi-wast",
    "tests/lib/wast",
    "tests/lib/compiler-test-derive",
    "tests/integration/cli",
    "tests/integration/ios",
    "fuzz",
]
resolver = "2"

[build-dependencies]
test-generator = { path = "tests/lib/test-generator" }
build-deps = "0.1.4"
anyhow = "1.0"
glob = "0.3"
rustc_version = "0.4"

[dev-dependencies]
anyhow = "1.0"
criterion = "0.3"
lazy_static = "1.4"
serial_test = "0.5"
wasmer-engine-dummy = { path = "tests/lib/engine-dummy" }
compiler-test-derive = { path = "tests/lib/compiler-test-derive" }
tempfile = "3.1"
loupe = "0.1"
# For logging tests using the `RUST_LOG=debug` when testing
test-log = { version = "0.2", default-features = false, features = ["trace"] }
tracing = { version = "0.1", default-features = false, features = ["log"] }
tracing-subscriber = { version = "0.3", default-features = false, features = ["env-filter", "fmt"] }

[features]
# Don't add the compiler features in default, please add them on the Makefile
# since we might want to autoconfigure them depending on the availability on the host.
default = [
    "wat",
    "wast",
    "universal",
    "dylib",
    "staticlib",
    "cache",
    "wasi",
    "emscripten",
    "middlewares",
]
engine = []
universal = [
    "wasmer-engine-universal",
    "engine",
]
dylib = [
    "wasmer-engine-dylib",
    "engine",
]
staticlib = [
    "wasmer-engine-staticlib",
    "engine",
]
cache = ["wasmer-cache"]
wast = ["wasmer-wast"]
wasi = ["wasmer-wasi"]
emscripten = ["wasmer-emscripten"]
wat = ["wasmer/wat"]
compiler = [
    "wasmer/compiler",
    "wasmer-compiler/translator",
    "wasmer-engine-universal/compiler",
    "wasmer-engine-dylib/compiler",
    "wasmer-engine-staticlib/compiler",
]
singlepass = [
    "wasmer-compiler-singlepass",
    "compiler",
]
cranelift = [
    "wasmer-compiler-cranelift",
    "compiler",
]
llvm = [
    "wasmer-compiler-llvm",
    "compiler",
]
middlewares = ["wasmer-middlewares"]

# Testing features
test-singlepass = [
    "singlepass",
]
test-cranelift = [
    "cranelift",
]
test-llvm = [
    "llvm",
]

test-dylib = [
    "dylib",
    "test-generator/test-dylib",
]
test-universal = [
    "universal",
    "test-generator/test-universal",
]

# Specifies that we're running in coverage testing mode. This disables tests
# that raise signals because that interferes with tarpaulin.
coverage = []

[profile.dev]
split-debuginfo = "unpacked"

[[bench]]
name = "static_and_dynamic_functions"
harness = false

[[example]]
name = "early-exit"
path = "examples/early_exit.rs"
required-features = ["cranelift"]

[[example]]
name = "engine-universal"
path = "examples/engine_universal.rs"
required-features = ["cranelift"]

[[example]]
name = "engine-dylib"
path = "examples/engine_dylib.rs"
required-features = ["cranelift"]

[[example]]
name = "engine-headless"
path = "examples/engine_headless.rs"
required-features = ["cranelift"]

[[example]]
name = "platform-headless-ios"
path = "examples/platform_ios_headless.rs"
required-features = ["cranelift"]

[[example]]
name = "cross-compilation"
path = "examples/engine_cross_compilation.rs"
required-features = ["cranelift"]

[[example]]
name = "compiler-singlepass"
path = "examples/compiler_singlepass.rs"
required-features = ["singlepass"]

[[example]]
name = "compiler-cranelift"
path = "examples/compiler_cranelift.rs"
required-features = ["cranelift"]

[[example]]
name = "compiler-llvm"
path = "examples/compiler_llvm.rs"
required-features = ["llvm"]

[[example]]
name = "exported-function"
path = "examples/exports_function.rs"
required-features = ["cranelift"]

[[example]]
name = "exported-global"
path = "examples/exports_global.rs"
required-features = ["cranelift"]

[[example]]
name = "exported-memory"
path = "examples/exports_memory.rs"
required-features = ["cranelift"]

[[example]]
name = "imported-function"
path = "examples/imports_function.rs"
required-features = ["cranelift"]

[[example]]
name = "imported-global"
path = "examples/imports_global.rs"
required-features = ["cranelift"]

[[example]]
name = "tunables-limit-memory"
path = "examples/tunables_limit_memory.rs"
required-features = ["cranelift"]

[[example]]
name = "wasi"
path = "examples/wasi.rs"
required-features = ["cranelift", "wasi"]

[[example]]
name = "wasi-pipes"
path = "examples/wasi_pipes.rs"
required-features = ["cranelift", "wasi"]

[[example]]
name = "table"
path = "examples/table.rs"
required-features = ["cranelift"]

[[example]]
name = "memory"
path = "examples/memory.rs"
required-features = ["cranelift"]

[[example]]
name = "instance"
path = "examples/instance.rs"
required-features = ["cranelift"]

[[example]]
name = "errors"
path = "examples/errors.rs"
required-features = ["cranelift"]

[[example]]
name = "imported-function-env"
path = "examples/imports_function_env.rs"
required-features = ["cranelift"]

[[example]]
name = "hello-world"
path = "examples/hello_world.rs"
required-features = ["cranelift"]

[[example]]
name = "metering"
path = "examples/metering.rs"
required-features = ["cranelift"]

[[example]]
name = "imports-exports"
path = "examples/imports_exports.rs"
required-features = ["cranelift"]

[[example]]
name = "features"
path = "examples/features.rs"
required-features = ["cranelift"]

[profile.dev]
opt-level = 0      # controls the `--opt-level` the compiler builds with.
                   # 0-1 is good for debugging. 2 is well-optimized. Max is 3.
                   # 's' attempts to reduce size, 'z' reduces size even more.
debug = true       # (u32 or bool) Include debug information (debug symbols).
                   # Equivalent to `-C debuginfo=2` compiler flag.
rpath = false      # controls whether compiler should set loader paths.
                   # If true, passes `-C rpath` flag to the compiler.
lto = false        # Link Time Optimization usually reduces size of binaries
                   # and static libraries. Increases compilation time.
                   # If true, passes `-C lto` flag to the compiler, and if a
                   # string is specified like 'thin' then `-C lto=thin` will
                   # be passed.
debug-assertions = true # controls whether debug assertions are enabled
                   # (e.g., debug_assert!() and arithmetic overflow checks)
codegen-units = 16 # if > 1 enables parallel code generation which improves
                   # compile times, but prevents some optimizations.
                   # Passes `-C codegen-units`.
panic = 'unwind'   # panic strategy (`-C panic=...`), can also be 'abort'
incremental = true # whether or not incremental compilation is enabled
                   # This can be overridden globally with the CARGO_INCREMENTAL
                   # environment variable or `build.incremental` config
                   # variable. Incremental is only used for path sources.
overflow-checks = true # use overflow checks for integer arithmetic.
                   # Passes the `-C overflow-checks=...` flag to the compiler.
